/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 public/models/jet-drone.glb -o src/components/Drone.tsx -t -T 
Files: public/models/jet-drone.glb [373.05KB] > /Users/miles/Sites/devlog/dream-site/src/components/jet-drone-transformed.glb [654.35KB] (-75%)
*/

import type * as THREE from "three";
import React from "react";
import { Float, useGLTF } from "@react-three/drei";
import type { GLTF } from "three-stdlib";
import { useControls } from "leva";

type GLTFResult = GLTF & {
  nodes: {
    AirBrakeBox: THREE.Mesh;
  };
  materials: Record<string, THREE.Material>;
};

export function Drone(props: JSX.IntrinsicElements["group"]) {
  const { x, y, z, rotationX, rotationY, rotationZ } = useControls("Drone", {
    x: { value: 0, min: -100, max: 100 },
    y: { value: 0.4, min: -100, max: 100 },
    z: { value: -2, min: -100, max: 100 },
    rotationX: { value: 1.86, min: -Math.PI, max: Math.PI },
    rotationY: { value: 0.36, min: -Math.PI, max: Math.PI },
    rotationZ: { value: 3.14, min: -Math.PI, max: Math.PI },
  });

  const { nodes } = useGLTF("/models/jet-drone-transformed.glb") as GLTFResult;
  return (
    <>
      <Float
        speed={0.8}
        rotationIntensity={0.3}
        floatIntensity={0.1}
        floatingRange={[1, 3]}
      >
        <group {...props} dispose={null}>
          <mesh
            geometry={nodes.AirBrakeBox.geometry}
            material={nodes.AirBrakeBox.material}
            rotation={[rotationX, rotationY, rotationZ]}
            position={[x, y, z]}
            scale={0.0005}
          />
        </group>
      </Float>
    </>
  );
}

useGLTF.preload("/models/jet-drone-transformed.glb");
